@page "/"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager //Allow to navigate between pages;
@inject ProtectedSessionStorage sessionStorage  // for session storage;

@*Lesson 14 : All HTML code for UI*@

<h1>Training Suggestions</h1>

<div>
    <button>Suggest</button>
</div>


<div>
    @*Suggesiton Count*@
    <div>@suggestions?.Count Suggestions</div>

    @*Toggle Button*@
    <div>
        <button @onclick="(() => OrderByNew(true))">New</button>
        <button @onclick="(() => OrderByNew(false))">Popular</button>
    </div>

    @*Search bar*@

    <div>
        <input type="text" placeholder = "Search" aria-label="Search box" @oninput = "((txt) => OnSerachInput((string)txt.Value))" />
    </div>
</div>

<div>
    <div>
        @if (suggestions is not null)
        {
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
                <div>
                    <div>
                            <div>@GetUpvoteTopText(s)</div>
                            <span class="oi oi-caret-top"></span>
                            <div>@GetUpvoteBottomText(s)</div>
                    </div>
                    <div>
                             <div @onclick="(() => OpenDetails(s))">@s.Suggestion</div>
                             <div>
                             <div @onclick="(() => OpenDetails(s))">@s.Category?.CategoryName</div>
                             </div>
                    </div>
                </div>
            </Virtualize>

        }
    </div>
</div>



@*Lesson 13 : All injection Methods*@
@code{

    private List<SuggestionModel> suggestions;
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;

    //Filter Settings
    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    //On Initilize Async Method : Loading Data from Cache

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();
        statuses = await statusData.GetAllStatuses();
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }


    //Load Filter State Method
    //SHIFT+ALT+.

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";     

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }


    //Filter Save State Method

    private async Task SaveFilterState()
    {
        //first selectedCatergory is key and sedond one is value
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    //Filter Suggestion Method

    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetAllApprovedSuggestions();


        //Fitler on Category List
        if (selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }

        //Fitler on Suggestion Status
        if (selectedStatus != "All")
        {
            output = output.Where(s => s.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }

        //Filter based on SearchText
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s => s.Suggestion.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) || s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        //Sorted by New

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count).ThenByDescending(s => s.DateCreated).ToList();
        }

        //Filtered suggested Output
        suggestions = output;

        //Fitler State Save

        await SaveFilterState();



    } 


    //HTML Helper Method

    // HTML Filtering
    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSerachInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }


    //HTML Suggestions User Vote
    private string GetUpvoteTopText(SuggestionModel suggestion)
    {
        if(suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            return "Click To";
        }

    }

    private string GetUpvoteBottomText(SuggestionModel suggestion)
    {
        if(suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }

    }

    //HTML Method to Open Suggestion Detail Page
    private void OpenDetails(SuggestionModel suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }

}
